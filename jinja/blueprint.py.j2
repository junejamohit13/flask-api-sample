{# templates/blueprint.py.j2 #}
from flask import Blueprint, jsonify, request
from repository.repository import Repository

{{ table_name }}_bp = Blueprint('{{ table_name }}_bp', __name__)
repo = Repository()

# GET /{{ table_name }}/<id>
@{{ table_name }}_bp.route('/{{ table_name }}/<int:id>', methods=['GET'])
def get_{{ table_name }}(id):
    data, source = repo.get_{{ table_name }}(id)
    if data:
        return jsonify({'data': data, 'source': source}), 200
    else:
        return jsonify({'error': '{{ table_name|capitalize() }} not found'}), 404

# POST /{{ table_name }}
@{{ table_name }}_bp.route('/{{ table_name }}', methods=['POST'])
def create_{{ table_name }}():
    data = request.get_json()
    if not data:
        return jsonify({'error': 'Invalid input'}), 400

    created_data = repo.create_{{ table_name }}(data)
    return jsonify({'data': created_data}), 201

# PUT /{{ table_name }}/<id>
@{{ table_name }}_bp.route('/{{ table_name }}/<int:id>', methods=['PUT'])
def update_{{ table_name }}(id):
    data = request.get_json()
    if not data:
        return jsonify({'error': 'Invalid input'}), 400

    updated_data = repo.update_{{ table_name }}(id, data)
    if updated_data:
        return jsonify({'data': updated_data}), 200
    else:
        return jsonify({'error': '{{ table_name|capitalize() }} not found'}), 404

{% for rel in relationships %}
# GET /{{ table_name }}/<a_id>/<{{ rel.related_table }}>s
@{{ table_name }}_bp.route('/{{ table_name }}/<int:a_id>/{{ rel.related_table }}s', methods=['GET'])
def get_{{ table_name }}_{{ rel.related_table }}s(a_id):
    bs_data, source = repo.get_{{ table_name }}_{{ rel.related_table }}s(a_id)
    if bs_data:
        return jsonify({'data': bs_data, 'source': source}), 200
    else:
        return jsonify({'error': '{{ table_name|capitalize() }} not found'}), 404

# POST /{{ table_name }}/<a_id>/<{{ rel.related_table }}>s
@{{ table_name }}_bp.route('/{{ table_name }}/<int:a_id>/{{ rel.related_table }}s', methods=['POST'])
def replace_{{ table_name }}_{{ rel.related_table }}s(a_id):
    data = request.get_json()
    if not data or '{{ rel.related_table }}_ids' not in data or not isinstance(data['{{ rel.related_table }}_ids'], list):
        return jsonify({'error': 'Invalid input. Expecting JSON with "{{ rel.related_table }}_ids" as a list.'}), 400

    related_ids = data['{{ rel.related_table }}_ids']
    success, message = repo.replace_{{ table_name }}_{{ rel.related_table }}s(a_id, related_ids)
    if success:
        return jsonify({'message': message}), 200
    else:
        if message == '{{ table_name }}_not_found':
            return jsonify({'error': '{{ table_name|capitalize() }} not found'}), 404
        elif message == 'one_or_more_{{ rel.related_table }}_not_found':
            return jsonify({'error': 'One or more {{ rel.related_table|capitalize() }} IDs are invalid.'}), 400
        else:
            return jsonify({'error': 'Unknown error.'}), 500

{% endfor %}
